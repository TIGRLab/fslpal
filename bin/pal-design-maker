#!/usr/bin/env python
"""
Usage:
    pal-design-maker [options] <database> <covars>...

Arguments:
    <database>  A .csv containing all of the data of interest
    <covars>    A list of strings of the desired covariate columns. Any
                covariate ending with '@' will be split by group.

Options:
    --filename=<filename>  Column name containing the statmap files.
    --group=<group>        Column name contaning the group identifiers.

Details:

    Takes a database .csv of the following format:

        filename,group,covar1,covar2,covar3...

    And creates a list of input files, and marching design matrix, for FSL's GLM
    programs, where,

        filename = /full/path/to/statmap.nii.gz
        group = a set of identifiers denoting group (n groups = n unique values)
        covar = columns of relevant covariates (e.g., age, sex, iq).

    If columns 'filename' and/or 'group' do not exist, they should be defined
    using --filename='column' and --group='column', respecively. They do not
    need to be in a particular column.

    If any covariate ends with '@', that covariate will be split by group and
    treated as continuous. This allows for group * covariate interactions at the
    expense of degrees of freedom.

    If any covariate has less than 10 unique values, it will automatically be
    treated as categorical and converted into dummy coded columns.

    Any row that begins with # will be ignored. Use this to 'comment out'
    subjects.

    All continuous covariates will be centered about 0 by subtracting the mean,
    either within group, or across groups. Missing values will be replaced with
    the mean of the group.
"""

from fslpal.docopt import docopt
import os, sys
import pandas as pd
import numpy as np

def covar_column(df, col, group=None):
    """
    Centers the variable submitted about zero.

    Each group gets a single column for each covariate, and 0s are entered for
    subjects not in a given group for each column, if group is defined.

    Missing values are also replaced with zeros.
    """
    print('MSG: adding covariate column {}'.format(col))

    if group:
        # mean center the entire covariate (irrespective of group)
        data = df[col]
        data = data - np.mean(data)

        # now zero out the values associated with the other groups, nans
        idx = df['group'] == group
        data = data[idx]
        data[data.isnull()] = 0
        covar = np.zeros(df.shape[0])
        covar[idx.as_matrix()] = data

    else:
        covar = df[col] - np.mean(df[col])
        covar[covar.isnull()] = 0
        covar = covar.as_matrix()

    return covar

def dummy_columns(df, col):
    """
    Returns a column as a categorical, non centered numeric vector.
    """
    print('MSG: adding dummy columns {}'.format(col))

    data = pd.get_dummies(df[col])
    data = data.as_matrix()

    return data

def subject_column(df, group):
    idx = df['group'] == group
    subject = np.zeros(df.shape[0])
    subject[idx.as_matrix()] = 1

    return subject

def main():
    """
    Prints out subjlist.txt and design-matrix.txt.
    """
    arguments = docopt(__doc__)
    database = arguments['<database>']
    covars   = arguments['<covars>']
    filename = arguments['--filename']
    group    = arguments['--group']

    # read in database and remove commented out rows
    database = pd.read_csv(database)
    test = database[database.columns[0]]

    # remove all commented-out rows (build numpy index manually)
    matches = filter(lambda x: x.startswith('#'), test.tolist())

    if len(matches) > 0:
        # build numpy index of non-commented rows manually
        idx = []
        for match in matches:
            idx.append(np.where(test == match)[0][0])
        idx = np.array(idx)
        idx = np.setdiff1d(np.arange(len(test)), idx)
        database = database.iloc[idx]

    # exit if the surviving rows contain nans
    if database.isnull().values.any():
        badSubj = database.loc[database.isnull().sum(axis=1) > 0]
        sys.exit('ERROR: found NaNs in the following database rows:\n {}'.format(badSubj))

    if filename:
        database = database.rename(columns = {filename : 'filename'})
    if group:
        database = database.rename(columns = {group : 'group'})

    # check that group and filename columns exist
    try:
        database['filename']
    except KeyError:
        sys.exit('ERROR: filename column does not exist.')
    try:
        database['group']
    except KeyError:
        sys.exit('ERROR: group column does not exist.')

    # init the output matrix as a block of zeros
    groups = database['group']
    ngroup = groups.nunique()
    nsubj = database.shape[0]

    # calculate the number of covariate columns
    count_split = 0
    count_dummy = 0
    count_reg = 0

    for cv in covars:
        # continuous variables that will be centered independently
        if cv.endswith('@'):
            count_split += 1
        # categorical variables will be converted into dummy columns
        elif len(database[cv].unique()) < 10:
            count_dummy += len(database[cv].unique())
        else:
            count_reg += 1

    # pre-calculate the size of the complete design matrix
    ncols = ngroup + count_reg + count_dummy + count_split*ngroup
    design = np.zeros((nsubj, ncols))

    print("""MSG: Creating design matrix with {} columns:
    {} groups
    {} dummy-coded covariates
    {} regular centered covariates
    {} split centered covariates""".format(
        ncols, ngroup, count_dummy, count_reg, count_split*ngroup))

    # begin
    ncol = 0
    fmtstr = ''

    # add subjects
    for group in groups.unique():
       subject = subject_column(database, group)
       design[:, ncol] = subject
       ncol += 1
       fmtstr = '{} %i'.format(fmtstr)

    # add covariates
    for covar in covars:

        # split by groups command
        if covar[-1] == '@':
            for group in groups.unique():
                design[:, ncol] = covar_column(database, covar[:-1], group)
                ncol += 1
                fmtstr = '{} %2.2f'.format(fmtstr)

        # split into dummy columns command
        elif len(database[covar].unique()) < 10:
            d = dummy_columns(database, covar)
            for i in range(len(database[covar].unique())):
                design[:, ncol] = d[:, i]
                ncol += 1
                fmtstr = '{} %i'.format(fmtstr)

        # regular continuous variable
        else:
            print(ncol)
            design[:, ncol] = covar_column(database, covar)
            ncol += 1
            fmtstr = '{} %2.2f'.format(fmtstr)

    np.savetxt('fsl_design.txt', design, fmt=fmtstr)

    # save subject list
    filenames = database['filename'].tolist()
    f = open('fsl_subjects.txt', 'wb')
    f.writelines('\n'.join(filenames))
    f.close()

if __name__ == '__main__':
    main()

